#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2012-2016 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     makeCGAL
#
# Description
#     Build script for CGAL
#
# Note
#     Normally builds against ThirdParty boost and gmp/mpfr when possible.
#     To override this behaviour (and use the system boost and/or gmp/mpfr),
#     simply specify a 'system' version. For example,
#         makeCGAL boost-system gmp-system
#
#     Mixing system and ThirdParty for gmp/mpfr is not supported.
#
#------------------------------------------------------------------------------

# Get CGAL, boost and gmp/mpfr versions
. $WM_PROJECT_DIR/etc/config.sh/functions
_foamEval SOURCE_CGAL_VERSIONS_ONLY=yes \
          $($WM_PROJECT_DIR/bin/foamEtcFile config.sh/CGAL)
_foamSource $($WM_PROJECT_DIR/bin/foamEtcFile config.sh/compiler)

boostPACKAGE=${boost_version:-boost-system}
gmpPACKAGE=${gmp_version:-gmp-system}
mpfrPACKAGE=${mpfr_version:-mpfr-system}
cgalPACKAGE=$cgal_version

#------------------------------------------------------------------------------
# Run from third-party directory only
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
    echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
    echo "    The environment variables are inconsistent with the installation."
    echo "    Check the OpenFOAM entries in your dot-files and source them."
    exit 1
}
. etc/tools/ThirdPartyFunctions
#------------------------------------------------------------------------------
Script="${0##*/}"

usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: $Script [OPTION] [CGAL-VERSION] [boost-VERSION] [gmp-VERSION] [mpfr-VERSION]
options:
  -gcc              force g++ instead of the value from \$WM_CXX
  -system           use system versions for boost/gmp/mpfr
  -help

* build CGAL with
      $cgalPACKAGE
      $boostPACKAGE
      $gmpPACKAGE
      $mpfrPACKAGE

Normally builds against ThirdParty boost and gmp/mpfr when possible.
To override this behaviour (and use the system boost and/or gmp/mpfr),
simply specify a 'system' version. For example,
    $Script boost-system gmp-system

Note: mixing system and ThirdParty for gmp/mpfr is not supported.

USAGE
    exit 1
}
#------------------------------------------------------------------------------

# Ensure CMake gets the correct C++ compiler
[ -n "$WM_CXX" ] && export CXX="$WM_CXX"


# Parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help)
        usage
        ;;
    '')
        # discard empty arguments
        ;;
    -gcc)
        export CXX=g++   # use g++
        ;;
    -sys*)
        gmpPACKAGE="gmp-system"
        mpfrPACKAGE="mpfr-system"
        boostPACKAGE="boost-system"
        ;;
    gmp-[4-9]* | gmp-system)
        gmpPACKAGE="${1%%/}"
        ;;
    mpfr-[2-9]* | mpfr-system)
        mpfrPACKAGE="${1%%/}"
        ;;
    CGAL-[0-9]*)
        cgalPACKAGE="${1%%/}"
        ;;
    boost-[0-9]* | boost_[0-9]* | boost-system )
        boostPACKAGE="${1%%/}"
        ;;
    *)
        die "unknown option/argument: '$1'"
        ;;
    esac
    shift
done

[ -n "$cgalPACKAGE" ] || die "The cgal-VERSION was not specified"

#------------------------------------------------------------------------------
#
# Build Boost
#
#   BOOST_SOURCE_DIR : location of the original sources

BOOST_ARCH_PATH=$installBASE/$boostPACKAGE
BOOST_SOURCE_DIR=$WM_THIRD_PARTY_DIR/$boostPACKAGE

if [ -d "$BOOST_ARCH_PATH" ]
then
    boostInc="$BOOST_ARCH_PATH/include"
    boostLib="$BOOST_ARCH_PATH/lib"
elif _foamIsSystem $BOOST_ARCH_PATH
then
    echo "Using boost-system"

    boostInc="/usr/include"

    # For completeness:
    # 64-bit needs lib64, but 32-bit needs lib (not lib32)
    if [ "$WM_ARCH_OPTION" = 64 ]
    then
        boostLib="/usr/lib$WM_ARCH_OPTION"
    else
        boostLib="/usr/lib"
    fi
else
    echo "Starting build: boost"
    echo

    boostInc="$BOOST_ARCH_PATH/include"
    boostLib="$BOOST_ARCH_PATH/lib"

    (
        cd $BOOST_SOURCE_DIR || exit 1

        rm -rf $BOOST_ARCH_PATH

        ./bootstrap.sh \
            --prefix=$BOOST_ARCH_PATH \
            --with-libraries=thread \
            --with-libraries=system \
        && ./bjam toolset=$WM_CC -j $WM_NCOMPPROCS install \
        && echo "Built: boost"
    ) || {
        echo "Error building: boost"
        exit 1
    }
fi

# nothing to build
if _foamIsSystem "$cgalPACKAGE"
then
    echo "Using CGAL-system"
    exit 0
fi

# nothing left to build
if [ "$cgal_version" = "cgal-system" ]
then
    echo "Using system installation of CGAL"
    exit 0
fi


# Retrieve boost version:
if [ -f "$boostInc/boost/version.hpp" ]
then
    BOOST_VERSION_NO=`sed -ne 's/^#define *BOOST_VERSION *\([0-9][0-9]*\).*$/\1/p' $boostInc/boost/version.hpp`
else
    echo "Boost does not appear to be installed"
    echo "stopping build"
    exit 1
fi

#------------------------------------------------------------------------------

cat<<SUMMARY
CGAL configuration
------------------
    CGAL    = $cgalPACKAGE
    BOOST   = $boostPACKAGE
    GMP     = $gmpPACKAGE
    MPFR    = $mpfrPACKAGE
------------------
SUMMARY

#------------------------------------------------------------------------------
#
# Build CGAL
#
#   CGAL_SOURCE_DIR : location of the original sources
#   CGAL_BINARY_DIR : location of the build
#   CGAL_DIR        : location of the installed program

CGAL_SOURCE_DIR=$WM_THIRD_PARTY_DIR/$cgalPACKAGE
CGAL_BINARY_DIR=$buildBASE/$cgalPACKAGE
CGAL_ARCH_PATH=$installBASE/$cgalPACKAGE
CGAL_DIR=$CGAL_ARCH_PATH

#
# gmp/mpfr installed without compiler name
installBASE=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH

GMP_ARCH_PATH=$installBASE/$gmpPACKAGE
MPFR_ARCH_PATH=$installBASE/$mpfrPACKAGE

(
    # Remove any existing build folder and recreate
    if [ -d $CGAL_BINARY_DIR ]
    then
        echo "removing old build directory"
        echo "    $CGAL_BINARY_DIR"
        rm -rf $CGAL_BINARY_DIR
    fi
    mkdir -p $CGAL_BINARY_DIR

    cd $CGAL_BINARY_DIR || exit 1

    unset configBoost configGmp configMpfr
    echo "----"
    echo "Configuring $cgalPACKAGE with boost $BOOST_VERSION_NO"
    echo "    Source         : $CGAL_SOURCE_DIR"
    echo "    Build          : $CGAL_BINARY_DIR"
    echo "    Target         : $CGAL_DIR"


    if [ -d "$BOOST_ARCH_PATH" ]
    then
        echo "    ThirdParty     : boost"
        configBoost=$(cat <<CMAKE_OPTIONS
 -DBoost_INCLUDE_DIR=$boostInc
 -DBoost_LIBRARY_DIRS=$boostLib
 -DBoost_THREAD_LIBRARY=$boostLib/libboost_thread.so
 -DBoost_THREAD_LIBRARY_RELEASE=$boostLib/libboost_thread.so
 -DBoost_SYSTEM_LIBRARY=$boostLib/libboost_system.so
 -DBoost_SYSTEM_LIBRARY_RELEASE=$boostLib/libboost_system.so
 -DBoost_VERSION=$BOOST_VERSION_NO
CMAKE_OPTIONS
)
    else
        echo "    system         : boost"
        configBoost=$(cat <<CMAKE_OPTIONS
 -DBOOST_LIBRARYDIR=$boostLib
CMAKE_OPTIONS
)
    fi

    if [ -d "$GMP_ARCH_PATH" ]
    then
        echo "    ThirdParty     : gmp"
        configGmp=$(cat <<CMAKE_OPTIONS
 -DGMP_INCLUDE_DIR=$GMP_ARCH_PATH/include
 -DGMP_LIBRARIES_DIR=$GMP_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH
 -DGMP_LIBRARIES=$GMP_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libgmp.so
 -DGMPXX_INCLUDE_DIR=$GMP_ARCH_PATH/include
 -DGMPXX_LIBRARIES=$GMP_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libgmpxx.so
CMAKE_OPTIONS
)
    else
        echo "    system         : gmp"
    fi

    if [ -d "$MPFR_ARCH_PATH" ]
    then
        echo "    ThirdParty     : mpfr"
        configMpfr=$(cat <<CMAKE_OPTIONS
 -DMPFR_INCLUDE_DIR=$MPFR_ARCH_PATH/include
 -DMPFR_LIBRARIES_DIR=$MPFR_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH
 -DMPFR_LIBRARIES=$MPFR_ARCH_PATH/lib$WM_COMPILER_LIB_ARCH/libmpfr.so
CMAKE_OPTIONS
)
    else
        echo "    system         : mpfr"
    fi

    echo "----"
    set -x
    cmake \
        -DCMAKE_INSTALL_PREFIX=$CGAL_ARCH_PATH \
        -DCMAKE_BUILD_TYPE=Release \
        -DWITH_CGAL_Qt5=OFF \
        $configBoost $configGmp $configMpfr \
        $CGAL_SOURCE_DIR \
    && make -j $WM_NCOMPPROCS \
    && make install || exit 1

    echo "----"
    echo "create '\$CGAL_ARCH_PATH/share/files'"
    echo "----"
    mkdir -p $CGAL_ARCH_PATH/share/src
    rm -f $CGAL_ARCH_PATH/share/files

    for i in assertions.cpp io.cpp MP_Float.cpp Random.cpp
    do
        if [ -e "$CGAL_SOURCE_DIR/src/CGAL/$i" ]
        then
            \cp $CGAL_SOURCE_DIR/src/CGAL/$i $CGAL_ARCH_PATH/share/src/
            echo "\${CGAL_ARCH_PATH}/share/src/$i" >> $CGAL_ARCH_PATH/share/files
        fi
    done

    echo "Done CGAL"
)

#------------------------------------------------------------------------------
